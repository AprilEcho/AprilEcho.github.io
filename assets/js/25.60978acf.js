(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{418:function(t,v,_){"use strict";_.r(v);var e=_(0),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),_("p",[t._v("本文是参考廖雪峰老师的Git资料再加上我自己对Git的理解，记录我的Git学习历程，作下此文是为以后学习，工作，开发中如果遇到问题可以回过头来参考参考。因为水平有限，难免会有出错的地方，欢迎指正。")]),t._v(" "),_("h2",{attrs:{id:"git是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git是什么"}},[t._v("#")]),t._v(" Git是什么")]),t._v(" "),_("ul",[_("li",[t._v("官方话：Git是一个免费的开源分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所有事务。")]),t._v(" "),_("li",[t._v("引用廖雪峰老师的话，它能自动帮我记录每次文件的改动，还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以。")])]),t._v(" "),_("h2",{attrs:{id:"为什么要学习git"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习git"}},[t._v("#")]),t._v(" 为什么要学习Git")]),t._v(" "),_("ul",[_("li",[t._v("面试要被问。可以应付面试。")]),t._v(" "),_("li",[t._v("很多公司开发都用Git来处理项目。现在不学，以后肯定还要学。")]),t._v(" "),_("li",[t._v("在我看来Git是现如今所有程序员都要掌握的，以后与同事共同开发项目必定要用到的，熟练掌握Git命令，可以提高开发的效率。。")])]),t._v(" "),_("h2",{attrs:{id:"安装git"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安装git"}},[t._v("#")]),t._v(" 安装Git")]),t._v(" "),_("ul",[_("li",[t._v("Windows\n直接在官网上去下载。下载完成后，随便在某个文件下右键如果有Git Bash Here就安装成功。安装后，还要在命令行输入")])]),t._v(" "),_("div",{staticClass:"language-php line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-php"}},[_("code",[_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$git")]),t._v(" config "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("global")]),t._v(" user"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),_("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"你的名字"')]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$git")]),t._v(" config "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("global")]),t._v(" user"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),_("span",{pre:!0,attrs:{class:"token double-quoted-string string"}},[t._v('"你的邮箱"')]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br")])]),_("p",[_("code",[t._v("global")]),t._v("表示全局，这台机器所有的Git仓库都会使用这个配置。允许单个仓库使用其他的名字和邮箱。")]),t._v(" "),_("ul",[_("li",[t._v("Mac\n评论区指出Mac也可以像Windows一样，按上面的步骤安装。 也可以直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”->“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。")])]),t._v(" "),_("h2",{attrs:{id:"仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#仓库"}},[t._v("#")]),t._v(" 仓库")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/28/16b9d385970c7b6c~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",alt:"img"}})]),t._v(" "),_("ul",[_("li",[t._v("本地仓库是对于远程仓库而言的。")]),t._v(" "),_("li",[t._v("本地仓库 = 工作区 + 版本区")]),t._v(" "),_("li",[t._v("工作区即磁盘上的文件集合。")]),t._v(" "),_("li",[t._v("版本区(版本库)即"),_("code",[t._v(".git")]),t._v("文件")]),t._v(" "),_("li",[t._v("版本库 = 暂存区(stage) + 分支(master) + 指针Head\n"),_("ul",[_("li",[t._v("以我使用最频繁的git命令为例，即提交到github为例。")]),t._v(" "),_("li",[_("code",[t._v("git init")]),t._v(" 原本本地仓库只包含着工作区，这是最常见的工作状态。此时，"),_("code",[t._v("git init")]),t._v("一下，表示在本地区域创建了一个"),_("code",[t._v(".git")]),t._v("文件,版本区建立。")]),t._v(" "),_("li",[_("code",[t._v("git add .")]),t._v(" 表示把工作区的所有文件全部提交到版本区里面的"),_("strong",[t._v("暂存区")])]),t._v(" "),_("li",[t._v("当然你也可以通过 "),_("code",[t._v("git add ./xxx/")]),t._v(" 一条一条分批添加到暂存区。")]),t._v(" "),_("li",[_("code",[t._v('git commit -m "xxx"')]),t._v(" 把暂存区的"),_("strong",[t._v("所有")]),t._v("文件提交到仓库区，暂存区空空荡荡。")]),t._v(" "),_("li",[_("code",[t._v("git remote add origin https://github.com/name/name_cangku.git")]),t._v(" 把本地仓库与远程仓库连接起来。")]),t._v(" "),_("li",[_("code",[t._v("git push -u origin master")]),t._v(" 把仓库区的文件提交到远程仓库里。")]),t._v(" "),_("li",[t._v("一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的。会有这样的信息"),_("code",[t._v("nothing to commit, working tree clean")])])])])]),t._v(" "),_("h2",{attrs:{id:"提交到github"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提交到github"}},[t._v("#")]),t._v(" 提交到GitHub")]),t._v(" "),_("p",[t._v("以前不熟悉git命令的时候，我提交项目到github上都是直接在网页上直接拉取文件提交上去的。有点羞耻。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/28/16b9c23ee01835ce~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",alt:"img"}})]),t._v(" "),_("ol",[_("li",[_("code",[t._v("git init")]),t._v(" .初始化，表示把这个文件变成Git可以管理的仓库。初始化后打开隐藏的文件可以看到有一个"),_("code",[t._v(".git")]),t._v("文件。")]),t._v(" "),_("li",[_("code",[t._v("git add .")]),t._v(" 后面的一个点表示把这个文件全部提交到暂存区。")]),t._v(" "),_("li",[_("code",[t._v("git add ./readme.md/")]),t._v(" 表示把这个文件下面的readme.md文件提交到暂存区。")]),t._v(" "),_("li",[_("code",[t._v('git commit -m "你要评论一点什么东西"')]),t._v(" "),_("code",[t._v("git commit")]),t._v("的意思是把暂存区的全部文件提交到本地仓库。"),_("code",[t._v("-m")]),t._v("后接评论。")]),t._v(" "),_("li",[_("code",[t._v("git remote add origin https://github.com/name/name_cangku.git")]),t._v("表示把你本地的仓库与GitHub上的远程仓库连接起来。只需要连接一次，以后提交的时候就可以不用谢这条命令了。"),_("code",[t._v("name")]),t._v("是你的github名字，"),_("code",[t._v("name_cangku")]),t._v("是你的仓库名。"),_("strong",[t._v("注意")]),t._v("不要把后面的"),_("code",[t._v(".git")]),t._v("给漏掉了。因为我前面就是这么走过来的，绕了很多弯路。至于如何在GitHub上新建仓库，网上有很多教程，这里不再赘述了。")]),t._v(" "),_("li",[_("code",[t._v("git push -u origin master")]),t._v(" 把本地仓库提交到远程仓库。(最后一步)在你的远程仓库上刷新一下就可以看到你提交的文件了。")]),t._v(" "),_("li",[t._v("最后提到的是，在"),_("code",[t._v('git commit -m ""')]),t._v("之前，可以重复"),_("code",[t._v("git add")]),t._v("到暂存区。但是"),_("code",[t._v("git commit")]),t._v("会把你之前存放在暂存区的全部文件"),_("strong",[t._v("一次性")]),t._v("全部提交到本地仓库。")])]),t._v(" "),_("h2",{attrs:{id:"版本的回溯与前进"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#版本的回溯与前进"}},[t._v("#")]),t._v(" 版本的回溯与前进")]),t._v(" "),_("p",[t._v("提交一个文件，有时候我们会提交很多次，在提交历史中，这样就产生了不同的版本。每次提交，Git会把他们串成一条时间线。如何回溯到我们提交的上一个版本，用"),_("code",[t._v("git reset --hard + 版本号")]),t._v("即可。 版本号可以用"),_("code",[t._v("git log")]),t._v("来查看，每一次的版本都会产生不一样的版本号。回溯之后，"),_("code",[t._v("git log")]),t._v("查看一下发现离我们最近的那个版本已经不见了。但是我还想要前进到最近的版本应该如何？只要"),_("code",[t._v("git reset --hard + 版本号")]),t._v("就行。退一步来讲，虽然我们可以通过"),_("code",[t._v("git reset --hard + 版本号")]),t._v(",靠记住版本号来可以在不同的版本之间来回穿梭。"),_("strong",[t._v("但是")]),t._v(",有时候把版本号弄丢了怎么办？"),_("code",[t._v("git reflog")]),t._v("帮你记录了每一次的命令，这样就可以找到版本号了，这样你又可以通过"),_("code",[t._v("git reset")]),t._v("来版本穿梭了。")]),t._v(" "),_("h2",{attrs:{id:"撤销"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[t._v("#")]),t._v(" 撤销")]),t._v(" "),_("ul",[_("li",[t._v("场景1：在工作区时，你修改了一个东西，你想撤销修改，"),_("code",[t._v("git checkout -- file")]),t._v("。廖雪峰老师指出撤销修改就回到和版本库一模一样的状态，即用版本库里的版本替换工作区的版本。")]),t._v(" "),_("li",[t._v("场景2：你修改了一个内容，并且已经"),_("code",[t._v("git add")]),t._v("到暂存区了。想撤销怎么办？回溯版本，"),_("code",[t._v("git reset --hard + 版本号")]),t._v(",再"),_("code",[t._v("git checkout -- file")]),t._v(",替换工作区的版本。")]),t._v(" "),_("li",[t._v("场景3：你修改了一个内容，并且已经"),_("code",[t._v("git commit")]),t._v("到了"),_("code",[t._v("master")]),t._v("。跟场景2一样，版本回溯，再进行撤销。")])]),t._v(" "),_("h2",{attrs:{id:"删除"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#删除"}},[t._v("#")]),t._v(" 删除")]),t._v(" "),_("ul",[_("li",[t._v("如果你"),_("code",[t._v("git add")]),t._v("一个文件到暂存区，然后在工作区又把文件删除了，Git会知道你删除了文件。如果你要把版本库里的文件删除，"),_("code",[t._v("git rm")]),t._v(" 并且"),_("code",[t._v('git commit -m "xxx"')]),t._v(".")]),t._v(" "),_("li",[t._v("如果你误删了工作区的文件，怎么办？使用撤销命令，"),_("code",[t._v("git checkout --<file>")]),t._v("就可以。"),_("strong",[t._v("这再次证明了撤销命令其实就是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。")])])]),t._v(" "),_("h2",{attrs:{id:"分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),_("p",[t._v("分支，就像平行宇宙，廖雪峰老师如是说。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。")]),t._v(" "),_("h4",{attrs:{id:"创建与合并分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建与合并分支"}},[t._v("#")]),t._v(" 创建与合并分支")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/28/16b9e012079c4724~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",alt:"img"}})]),t._v(" "),_("p",[t._v("在没有其他分支插进来时，只有一个master主分支。每次你"),_("code",[t._v("git push -u origin master")]),t._v(" 提交就是增加一条时间轴，master也会跟着移动。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/28/16b9e11b1115072b~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",alt:"img"}})]),t._v(" "),_("p",[t._v("创建一个other的分支，通过other提交，虽然时间轴向前走了，但是主分支master还在原来的位置。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/28/16b9e1ce1d3c3b03~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",alt:"img"}})]),t._v(" "),_("p",[t._v("理论分析完，看一下命令怎么写。")]),t._v(" "),_("ul",[_("li",[t._v("创建分支"),_("code",[t._v("other")]),t._v(",切换到"),_("code",[t._v("other")]),t._v("分支。")])]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("git branch other\ngit checkout other\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br")])]),_("ul",[_("li",[t._v("查看当前所有分支")])]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("git branch\n* other\n  master\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])]),_("p",[t._v("当前的分支会有一个"),_("code",[t._v("*")])]),t._v(" "),_("ul",[_("li",[t._v("用"),_("code",[t._v("other")]),t._v("提交")])]),t._v(" "),_("div",{staticClass:"language-sql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-sql"}},[_("code",[t._v("git "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("add")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("xxx"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\ngit "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),_("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xxx"')]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br")])]),_("ul",[_("li",[_("code",[t._v("other")]),t._v("分支完成，切换回"),_("code",[t._v("master")])])]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("git checkout master\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("ul",[_("li",[t._v("此时，master分支上并没有"),_("code",[t._v("other")]),t._v("的文件，因为分支还没有合并。")]),t._v(" "),_("li",[_("strong",[t._v("合并分支")])])]),t._v(" "),_("div",{staticClass:"language-sql line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-sql"}},[_("code",[t._v("git "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("merge")]),t._v(" other\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("ul",[_("li",[t._v("合并完成之后，就可以在master分支上查看到文件了。")]),t._v(" "),_("li",[t._v("删除"),_("code",[t._v("other")]),t._v("分支。")])]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("git branch -d other\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("ul",[_("li",[t._v("我由此想到，在以后工作中，应该是一个开放小组共同开发一个项目，组长会创建很多分支，每一个分支可以交给一个人去开发某一个功能，一个小组共同开发而且不会相互干扰。谁的功能完成了，可以由组长合并一下完成了的分支。哦，完美！")])]),t._v(" "),_("h4",{attrs:{id:"解决合并分支问题"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解决合并分支问题"}},[t._v("#")]),t._v(" 解决合并分支问题")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/29/16ba102bd434afc6~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",alt:"img"}})]),t._v(" "),_("p",[t._v("假如有这样一种情况，分支"),_("code",[t._v("other")]),t._v("已经"),_("code",[t._v("commit")]),t._v("了，"),_("strong",[t._v("但是")]),t._v("此时指针指回"),_("code",[t._v("master")]),t._v("时，并且"),_("code",[t._v("master")]),t._v("没有合并，而是"),_("code",[t._v("git add / commit")]),t._v(" 提交了。这样，就产生了冲突，主分支"),_("code",[t._v("master")]),t._v("文件内容与"),_("code",[t._v("other")]),t._v("分支的内容不一样。合并不起来！所以，")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("修改文件的内容，让其保持一致。")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git add")]),t._v(" "),_("code",[t._v("git commit")]),t._v(" 提交。")])]),t._v(" "),_("li",[_("p",[t._v("分支合并了。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/29/16ba11a0ba73803d~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",alt:"img"}})])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git log --graph")]),t._v(" 查看分支合并图")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git branch -d other")]),t._v(" 删除分支，任务结束。")])])]),t._v(" "),_("h4",{attrs:{id:"分支管理策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支管理策略"}},[t._v("#")]),t._v(" 分支管理策略")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git merge --no-ff other")]),t._v(" 禁用"),_("code",[t._v("Fast forward")]),t._v("模式，因为使用"),_("code",[t._v("Fast forward")]),t._v("模式，删除分支后，分支历史信息会丢失。")])]),t._v(" "),_("h4",{attrs:{id:"bug分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#bug分支"}},[t._v("#")]),t._v(" BUG分支")]),t._v(" "),_("blockquote",[_("p",[t._v("廖雪峰老师提到，工作中每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。但如果你手上有分支在工作中，你的上级要你改另外的分支的BUG。你要把现在正在工作的分支保存下来，"),_("code",[t._v("git stash")]),t._v(",把当前工作现场“存储”起来，等以后恢复后继续工作。当你解决BUG后，"),_("code",[t._v("git checkout other")]),t._v("回到自己的分支。用"),_("code",[t._v("git stash list")]),t._v("查看你刚刚“存放”起来的工作去哪里了。此时你要恢复工作：")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git stash apply")]),t._v("恢复却不删除"),_("code",[t._v("stash")]),t._v("内容，"),_("code",[t._v("git stash drop")]),t._v("删除"),_("code",[t._v("stash")]),t._v("内容。")]),t._v(" "),_("li",[_("code",[t._v("git stash pop")]),t._v("恢复的同时把stash内容也删了.")]),t._v(" "),_("li",[t._v("此时，用"),_("code",[t._v("git stash list")]),t._v("查看，看不到任何"),_("code",[t._v("stash")]),t._v(" 内容。\n"),_("strong",[t._v("总结：修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场")])])]),t._v(" "),_("h4",{attrs:{id:"删除分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git branch -d + 分支")]),t._v("有可能会删除失败，因为Git会保护没有被合并的分支。")]),t._v(" "),_("li",[_("code",[t._v("git branch -D + 分支")]),t._v(" 强行删除，丢弃没被合并的分支。")])]),t._v(" "),_("h4",{attrs:{id:"多人协作"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多人协作"}},[t._v("#")]),t._v(" 多人协作")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git remote")]),t._v(" 查看远程库的信息，会显示"),_("code",[t._v("origin")]),t._v("，远程仓库默认名称为"),_("code",[t._v("origin")])]),t._v(" "),_("li",[_("code",[t._v("git remote -v")]),t._v("显示更详细的信息")]),t._v(" "),_("li",[_("code",[t._v("git push -u origin master")]),t._v("推送"),_("code",[t._v("master")]),t._v("分支到"),_("code",[t._v("origin")]),t._v("远程仓库。")]),t._v(" "),_("li",[_("code",[t._v("git push -u origin other")]),t._v(" 推送"),_("code",[t._v("other")]),t._v("到"),_("code",[t._v("origin")]),t._v("远程仓库。")])]),t._v(" "),_("h4",{attrs:{id:"抓取分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#抓取分支"}},[t._v("#")]),t._v(" 抓取分支")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/6/29/16ba20c43f386f7c~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.image",alt:"img"}})]),t._v(" "),_("p",[t._v("产生上图的冲突时，")]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("git pull")]),t._v(" 把最新的提交从远程仓库中抓取下来，在本地合并，解决冲突。在进行"),_("code",[t._v("git pull")])])]),t._v(" "),_("li",[_("p",[t._v("如果")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("git pull\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("也失败了，还要指定分支之间的链接，这一步Git会提醒你怎么做。然后再")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("git pull\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[t._v("。")]),t._v(" "),_("blockquote",[_("p",[_("strong",[t._v("廖雪峰老师的总结：多人协作的工作模式通常是这样：")])])]),t._v(" "),_("ul",[_("li",[t._v("首先，可以试图用"),_("code",[t._v("git push origin <branch-name>")]),t._v("推送自己的修改；")]),t._v(" "),_("li",[t._v("如果推送失败，则因为远程分支比你的本地更新，需要先用"),_("code",[t._v("git pull")]),t._v("试图合并；")]),t._v(" "),_("li",[t._v("如果合并有冲突，则解决冲突，并在本地提交；")]),t._v(" "),_("li",[t._v("没有冲突或者解决掉冲突后，再用"),_("code",[t._v("git push origin <branch-name>")]),t._v(" 推送就能成功！")]),t._v(" "),_("li",[t._v("如果"),_("code",[t._v("git pull")]),t._v("提示"),_("code",[t._v("no tracking information")]),t._v("，则说明本地分支和远程分支的链接关系没有创建，用命令"),_("code",[t._v("git branch --set-upstream-to <branch-name> origin/<branch-name>")]),t._v("。")])]),t._v(" "),_("h4",{attrs:{id:"rebase"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#rebase"}},[t._v("#")]),t._v(" Rebase")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git rebase")]),t._v(" 把分叉的提交历史“整理”成一条直线，看上去更直观.缺点是本地的分叉提交已经被修改过了。")])]),t._v(" "),_("li",[_("p",[t._v("最后在进行"),_("code",[t._v("git push -u origin master")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("rebase")]),t._v("的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。")])])]),t._v(" "),_("h2",{attrs:{id:"标签管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标签管理"}},[t._v("#")]),t._v(" 标签管理")]),t._v(" "),_("blockquote",[_("p",[t._v("比如一个APP要上线，通常在版本库中打一个标签(tag), 这样，就确定了打标签的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。\nGit的标签虽然是版本库的快照，但其实它就是指向某个commit的指针。\n"),_("code",[t._v("tag")]),t._v("其实就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。比如"),_("code",[t._v("tag v2.1")]),t._v("就是把历史上的一个版本的东西叫做"),_("code",[t._v("v2.1")])])]),t._v(" "),_("h4",{attrs:{id:"创建标签"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建标签"}},[t._v("#")]),t._v(" 创建标签")]),t._v(" "),_("p",[t._v("步骤：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git branch")]),t._v("查看当前分支,"),_("code",[t._v("git checkout master")]),t._v("切换到"),_("code",[t._v("master")]),t._v("分支。")]),t._v(" "),_("li",[_("code",[t._v("git tag <name>")]),t._v(" 打标签，默认为"),_("code",[t._v("HEAD")]),t._v("。比如"),_("code",[t._v("git tag v1.0")])]),t._v(" "),_("li",[t._v("默认标签是打在最新提交的"),_("code",[t._v("commit")]),t._v("上的。如果想要打标签在以前的"),_("code",[t._v("commit")]),t._v("上，要"),_("code",[t._v("git log")]),t._v("找到历史提交的"),_("code",[t._v("commit")]),t._v(" id.")]),t._v(" "),_("li",[t._v("如果一个"),_("code",[t._v("commt id")]),t._v("是"),_("code",[t._v("du2n2d9")]),t._v(",执行"),_("code",[t._v("git tag v1.0 du2n2d9")]),t._v("就把这个版本打上了"),_("code",[t._v("v1.0")]),t._v("的标签了。")]),t._v(" "),_("li",[_("code",[t._v("git tag")]),t._v(" 查看所有标签，可以知道历史版本的"),_("code",[t._v("tag")])]),t._v(" "),_("li",[t._v("标签不是按时间顺序列出，而是按字母排序的。")]),t._v(" "),_("li",[_("code",[t._v("git show <tagname>")]),t._v(" 查看标签信息。")]),t._v(" "),_("li",[_("code",[t._v('git tag -a <标签名> -m "<说明>"')]),t._v(",创建带说明的标签。 "),_("code",[t._v("-a")]),t._v("指定标签名，"),_("code",[t._v("-m")]),t._v("指定说明文字。用"),_("code",[t._v("show")]),t._v("可以查看说明。")])]),t._v(" "),_("h4",{attrs:{id:"操作标签"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#操作标签"}},[t._v("#")]),t._v(" 操作标签")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git tag -d v1.0")]),t._v(" 删除标签。因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。")]),t._v(" "),_("li",[_("code",[t._v("git push origin <tagname>")]),t._v(" 推送某个标签到远程")]),t._v(" "),_("li",[_("code",[t._v("git push origin --tags")]),t._v(" 一次性推送全部尚未推送到远程的本地标签")]),t._v(" "),_("li",[t._v("如果标签推送到远程。"),_("code",[t._v("git tag -d v1.0")]),t._v(" 先删除本地标签v1.0。"),_("code",[t._v("git push origin :refs/tags/v1.0")]),t._v("删除远程标签v1.0")])]),t._v(" "),_("h2",{attrs:{id:"自定义git"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#自定义git"}},[t._v("#")]),t._v(" 自定义Git")]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("git config --global color.ui true")]),t._v("让Git显示颜色，会让命令输出看起来更醒目")])]),t._v(" "),_("li",[_("p",[t._v("忽略特殊文件 创建一个"),_("code",[t._v(".gitignore")]),t._v("文件，把需要忽略的文件名填进去。Git就会自动忽略这些文件。我也在学习中遇到过这样的问题，比如"),_("code",[t._v("node_modules")]),t._v("文件就可以忽略。")])]),t._v(" "),_("li",[_("blockquote",[_("p",[t._v("忽略文件原则：忽略操作系统自动生成的文件，比如缩略图等； 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件； 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。")])])]),t._v(" "),_("li",[_("p",[t._v("强制提交已忽略的的文件。"),_("code",[t._v("git add -f <file>")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("git check-ignore -v <file>")]),t._v("检查为什么Git会忽略该文件。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("给Git命令配别名")]),t._v(",这个有点骚，就是你以后想输入"),_("code",[t._v("git rebase")]),t._v("时,你给它一个“外号”，就叫它"),_("code",[t._v("git nb")]),t._v("。以后你可以通过"),_("code",[t._v("git nb")]),t._v("来代替"),_("code",[t._v("git rebase")]),t._v("。具体怎么转换可以去"),_("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.liaoxuefeng.com%2Fwiki%2F896043488029600%2F898732837407424",target:"_blank",rel:"noopener noreferrer"}},[t._v("廖雪峰老师的网站"),_("OutboundLink")],1),t._v("看。因为水平有限，我觉得先把正常的Git命令搞清楚来就很不错了。")])])]),t._v(" "),_("h2",{attrs:{id:"常用git命令总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常用git命令总结"}},[t._v("#")]),t._v(" 常用Git命令总结")]),t._v(" "),_("ul",[_("li",[_("code",[t._v('git config --global user.name "你的名字"')]),t._v(" 让你全部的"),_("code",[t._v("Git")]),t._v("仓库绑定你的名字")]),t._v(" "),_("li",[_("code",[t._v('git config --global user.email "你的邮箱"')]),t._v(" 让你全部的"),_("code",[t._v("Git")]),t._v("仓库绑定你的邮箱")]),t._v(" "),_("li",[_("code",[t._v("git init")]),t._v(" 初始化你的仓库")]),t._v(" "),_("li",[_("code",[t._v("git add .")]),t._v(" 把工作区的文件全部提交到暂存区")]),t._v(" "),_("li",[_("code",[t._v("git add ./<file>/")]),t._v(" 把工作区的"),_("code",[t._v("<file>")]),t._v("文件提交到暂存区")]),t._v(" "),_("li",[_("code",[t._v('git commit -m "xxx"')]),t._v(" 把暂存区的所有文件提交到仓库区，"),_("strong",[t._v("暂存区空空荡荡")])]),t._v(" "),_("li",[_("code",[t._v("git remote add origin https://github.com/name/name_cangku.git")]),t._v(" 把本地仓库与远程仓库连接起来")]),t._v(" "),_("li",[_("code",[t._v("git push -u origin master")]),t._v(" 把仓库区的主分支"),_("code",[t._v("master")]),t._v("提交到远程仓库里")]),t._v(" "),_("li",[_("code",[t._v("git push -u origin <其他分支>")]),t._v(" 把其他分支提交到远程仓库")]),t._v(" "),_("li",[_("code",[t._v("git status")]),t._v("查看当前仓库的状态")]),t._v(" "),_("li",[_("code",[t._v("git diff")]),t._v(" 查看文件修改的具体内容")]),t._v(" "),_("li",[_("code",[t._v("git log")]),t._v(" 显示从最近到最远的提交历史")]),t._v(" "),_("li",[_("code",[t._v("git clone + 仓库地址")]),t._v("下载克隆文件")]),t._v(" "),_("li",[_("code",[t._v("git reset --hard + 版本号")]),t._v(" 回溯版本，版本号在"),_("code",[t._v("commit")]),t._v("的时候与"),_("code",[t._v("master")]),t._v("跟随在一起")]),t._v(" "),_("li",[_("code",[t._v("git reflog")]),t._v(" 显示命令历史")]),t._v(" "),_("li",[_("code",[t._v("git checkout -- <file>")]),t._v(" 撤销命令，用版本库里的文件替换掉工作区的文件。我觉得就像是"),_("code",[t._v("Git")]),t._v("世界的"),_("code",[t._v("ctrl + z")])]),t._v(" "),_("li",[_("code",[t._v("git rm")]),t._v(" 删除版本库的文件")]),t._v(" "),_("li",[_("code",[t._v("git branch")]),t._v(" 查看当前所有分支")]),t._v(" "),_("li",[_("code",[t._v("git branch <分支名字>")]),t._v(" 创建分支")]),t._v(" "),_("li",[_("code",[t._v("git checkout <分支名字>")]),t._v(" 切换到分支")]),t._v(" "),_("li",[_("code",[t._v("git merge <分支名字>")]),t._v(" 合并分支")]),t._v(" "),_("li",[_("code",[t._v("git branch -d <分支名字>")]),t._v(" 删除分支,有可能会删除失败，因为"),_("code",[t._v("Git")]),t._v("会保护没有被合并的分支")]),t._v(" "),_("li",[_("code",[t._v("git branch -D + <分支名字>")]),t._v(" 强行删除，丢弃没被合并的分支")]),t._v(" "),_("li",[_("code",[t._v("git log --graph")]),t._v(" 查看分支合并图")]),t._v(" "),_("li",[_("code",[t._v("git merge --no-ff <分支名字>")]),t._v(" 合并分支的时候禁用"),_("code",[t._v("Fast forward")]),t._v("模式,因为这个模式会丢失分支历史信息")]),t._v(" "),_("li",[_("code",[t._v("git stash")]),t._v(" 当有其他任务插进来时，把当前工作现场“存储”起来,以后恢复后继续工作")]),t._v(" "),_("li",[_("code",[t._v("git stash list")]),t._v(" 查看你刚刚“存放”起来的工作去哪里了")]),t._v(" "),_("li",[_("code",[t._v("git stash apply")]),t._v(" 恢复却不删除"),_("code",[t._v("stash")]),t._v("内容")]),t._v(" "),_("li",[_("code",[t._v("git stash drop")]),t._v(" 删除"),_("code",[t._v("stash")]),t._v("内容")]),t._v(" "),_("li",[_("code",[t._v("git stash pop")]),t._v(" 恢复的同时把stash内容也删了")]),t._v(" "),_("li",[_("code",[t._v("git remote")]),t._v(" 查看远程库的信息，会显示"),_("code",[t._v("origin")]),t._v("，远程仓库默认名称为"),_("code",[t._v("origin")])]),t._v(" "),_("li",[_("code",[t._v("git remote -v")]),t._v(" 显示更详细的信息")]),t._v(" "),_("li",[_("code",[t._v("git pull")]),t._v(" 把最新的提交从远程仓库中抓取下来，在本地合并,和"),_("code",[t._v("git push")]),t._v("相反")]),t._v(" "),_("li",[_("code",[t._v("git rebase")]),t._v(" 把分叉的提交历史“整理”成一条直线，看上去更直观")]),t._v(" "),_("li",[_("code",[t._v("git tag")]),t._v(" 查看所有标签，可以知道历史版本的tag")]),t._v(" "),_("li",[_("code",[t._v("git tag <name>")]),t._v(" 打标签，默认为"),_("code",[t._v("HEAD")]),t._v("。比如"),_("code",[t._v("git tag v1.0")])]),t._v(" "),_("li",[_("code",[t._v("git tag <tagName> <版本号>")]),t._v(" 把版本号打上标签，版本号就是"),_("code",[t._v("commit")]),t._v("时，跟在旁边的一串字母数字")]),t._v(" "),_("li",[_("code",[t._v("git show <tagName>")]),t._v(" 查看标签信息")]),t._v(" "),_("li",[_("code",[t._v('git tag -a <tagName> -m "<说明>"')]),t._v(" 创建带说明的标签。 "),_("code",[t._v("-a")]),t._v("指定标签名，"),_("code",[t._v("-m")]),t._v("指定说明文字")]),t._v(" "),_("li",[_("code",[t._v("git tag -d <tagName>")]),t._v(" 删除标签")]),t._v(" "),_("li",[_("code",[t._v("git push origin <tagname>")]),t._v(" 推送某个标签到远程")]),t._v(" "),_("li",[_("code",[t._v("git push origin --tags")]),t._v(" 一次性推送全部尚未推送到远程的本地标签")]),t._v(" "),_("li",[_("code",[t._v("git push origin :refs/tags/<tagname>")]),t._v(" 删除远程标签"),_("code",[t._v("<tagname>")])]),t._v(" "),_("li",[_("code",[t._v("git config --global color.ui true")]),t._v(" 让Git显示颜色，会让命令输出看起来更醒目")]),t._v(" "),_("li",[_("code",[t._v("git add -f <file>")]),t._v(" 强制提交已忽略的的文件")]),t._v(" "),_("li",[_("code",[t._v("git check-ignore -v <file>")]),t._v(" 检查为什么Git会忽略该文件")])])])}),[],!1,null,null,null);v.default=a.exports}}]);